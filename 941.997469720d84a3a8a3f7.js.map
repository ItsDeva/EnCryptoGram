{"version":3,"file":"941.997469720d84a3a8a3f7.js","mappings":"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","sources":["webpack://telegram-t/./src/util/WorkerConnector.ts","webpack://telegram-t/./src/lib/rlottie/RLottie.ts","webpack://telegram-t/./src/util/cycleRestrict.ts"],"sourcesContent":["import generateIdFor from './generateIdFor';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n  acceptsBuffer?: boolean;\n}\n\ntype CallMethodData = {\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n};\n\ntype OriginMessageData = CallMethodData | {\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\nexport type WorkerMessageData = {\n  type: 'methodResponse';\n  messageId: string;\n  response?: any;\n  error?: { message: string };\n} | {\n  type: 'methodCallback';\n  messageId: string;\n  callbackArgs: any[];\n} | {\n  type: 'unhandledError';\n  error?: { message: string };\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestStates {\n  messageId: string;\n  resolve: Function;\n  reject: Function;\n  callback: AnyToVoidFunction;\n}\n\n// TODO Replace `any` with proper generics\nexport default class WorkerConnector {\n  private requestStates = new Map<string, RequestStates>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestStates>();\n\n  constructor(private worker: Worker) {\n    this.subscribe();\n  }\n\n  request(messageData: { name: string; args: any }) {\n    const { worker, requestStates, requestStatesByCallback } = this;\n\n    const messageId = generateIdFor(requestStates);\n    const payload: CallMethodData = {\n      type: 'callMethod',\n      messageId,\n      ...messageData,\n    };\n\n    const requestState = { messageId } as RequestStates;\n\n    // Re-wrap type because of `postMessage`\n    const promise: Promise<any> = new Promise((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    worker.postMessage(payload);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.worker.postMessage({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  private subscribe() {\n    const { worker, requestStates } = this;\n\n    worker.addEventListener('message', ({ data }: WorkerMessageEvent) => {\n      if (data.type === 'methodResponse') {\n        const requestState = requestStates.get(data.messageId);\n        if (requestState) {\n          if (data.error) {\n            requestState.reject(data.error);\n          } else {\n            requestState.resolve(data.response);\n          }\n        }\n      } else if (data.type === 'methodCallback') {\n        const requestState = requestStates.get(data.messageId);\n        requestState?.callback?.(...data.callbackArgs);\n      } else if (data.type === 'unhandledError') {\n        throw data.error;\n      }\n    });\n  }\n}\n","import {\n  DPR,\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_SAFARI,\n} from '../../util/environment';\nimport WorkerConnector from '../../util/WorkerConnector';\nimport { animate } from '../../util/animation';\nimport cycleRestrict from '../../util/cycleRestrict';\n\ninterface Params {\n  noLoop?: boolean;\n  size?: number;\n  quality?: number;\n  isLowPriority?: boolean;\n}\n\ntype Frames = ArrayBuffer[];\ntype Chunks = (Frames | undefined)[];\n\n// TODO Consider removing chunks\nconst CHUNK_SIZE = 1;\nconst MAX_WORKERS = 4;\nconst HIGH_PRIORITY_QUALITY = IS_SINGLE_COLUMN_LAYOUT ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = 0.75;\nconst HIGH_PRIORITY_MAX_FPS = 60;\nconst LOW_PRIORITY_MAX_FPS = 30;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\n\nconst workers = new Array(MAX_WORKERS).fill(undefined).map(\n  () => new WorkerConnector(new Worker(new URL('./rlottie.worker.ts', import.meta.url))),\n);\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private imgSize!: number;\n\n  private key!: string;\n\n  private msPerFrame!: number;\n\n  private reduceFactor!: number;\n\n  private cacheModulo!: number;\n\n  private chunkSize!: number;\n\n  private workerIndex!: number;\n\n  private chunks: Chunks = [];\n\n  private framesCount?: number;\n\n  private chunksCount?: number;\n\n  // Container\n\n  private canvas = document.createElement('canvas');\n\n  private ctx = this.canvas.getContext('2d')!;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isOnLoadFired = false;\n\n  private isDestroyed = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  constructor(\n    private id: string,\n    private container: HTMLDivElement,\n    private animationData: AnyLiteral,\n    private params: Params = {},\n    private onLoad?: () => void,\n  ) {\n    this.initContainer();\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play() {\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause() {\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    const currentChunkIndex = this.getChunkIndex(this.approxFrameIndex);\n    this.chunks = this.chunks.map((chunk, i) => (i === currentChunkIndex ? chunk : undefined));\n  }\n\n  goToAndPlay(frameIndex: number) {\n    this.approxFrameIndex = Math.floor(frameIndex / this.reduceFactor);\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  goToAndStop(frameIndex: number) {\n    this.approxFrameIndex = Math.floor(frameIndex / this.reduceFactor);\n    this.stopFrameIndex = Math.floor(frameIndex / this.reduceFactor);\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number]) {\n    this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.destroyRenderer();\n    this.destroyContainer();\n  }\n\n  private initContainer() {\n    if (!(this.container.parentNode instanceof HTMLElement)) {\n      throw new Error('[RLottie] Container is not mounted');\n    }\n\n    let { size } = this.params;\n\n    if (!size) {\n      size = (\n        this.container.offsetWidth\n        || parseInt(this.container.style.width, 10)\n        || this.container.parentNode.offsetWidth\n      );\n\n      if (!size) {\n        throw new Error('[RLottie] Failed to detect width from container');\n      }\n    }\n\n    this.canvas.style.width = `${size}px`;\n    this.canvas.style.height = `${size}px`;\n\n    const { isLowPriority, quality = isLowPriority ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY } = this.params;\n    // Reduced quality only looks acceptable on high DPR screens\n    const imgSize = Math.round(size * Math.max(DPR * quality, 1));\n\n    this.canvas.width = imgSize;\n    this.canvas.height = imgSize;\n\n    this.container.appendChild(this.canvas);\n\n    this.imgSize = imgSize;\n  }\n\n  private initConfig() {\n    this.key = `${this.id}_${this.imgSize}`;\n\n    const { isLowPriority } = this.params;\n\n    const maxFps = isLowPriority ? LOW_PRIORITY_MAX_FPS : HIGH_PRIORITY_MAX_FPS;\n    const sourceFps = this.animationData.fr || maxFps;\n    this.reduceFactor = sourceFps % maxFps === 0 ? sourceFps / maxFps : 1;\n    this.msPerFrame = 1000 / (sourceFps / this.reduceFactor);\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n    this.chunkSize = CHUNK_SIZE;\n  }\n\n  private destroyContainer() {\n    this.canvas.remove();\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'init',\n      args: [\n        this.key,\n        this.animationData,\n        this.imgSize,\n        this.params.isLowPriority,\n        this.reduceFactor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'destroy',\n      args: [this.key],\n    });\n  }\n\n  private onRendererInit(framesCount: number) {\n    this.framesCount = framesCount;\n    this.chunksCount = Math.ceil(framesCount / this.chunkSize);\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating && this.isOnLoadFired) {\n        return false;\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const chunkIndex = this.getChunkIndex(frameIndex);\n      const chunk = this.chunks[chunkIndex];\n      if (!chunk) {\n        this.requestChunk(chunkIndex);\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && chunkIndex % this.cacheModulo === 0) {\n        this.cleanupPrevChunk(chunkIndex);\n      }\n\n      this.requestNextChunk(chunkIndex);\n\n      if (frameIndex !== this.prevFrameIndex) {\n        const frame = this.getFrame(frameIndex);\n        if (!frame) {\n          this.isAnimating = false;\n          this.isWaiting = true;\n          return false;\n        }\n\n        const imageData = new ImageData(new Uint8ClampedArray(frame), this.imgSize, this.imgSize);\n        this.ctx.putImageData(imageData, 0, 0);\n\n        if (this.onLoad && !this.isOnLoadFired) {\n          this.isOnLoadFired = true;\n          this.onLoad();\n        }\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = Math.min(1, (this.direction * this.speed) / currentSpeed);\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          return false;\n        }\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          return false;\n        }\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n        || (\n          (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n          || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n        ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestChunk(this.getChunkIndex(nextFrameIndex));\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  private getFrame(frameIndex: number) {\n    const chunkIndex = this.getChunkIndex(frameIndex);\n    const indexInChunk = this.getFrameIndexInChunk(frameIndex);\n    const chunk = this.chunks[chunkIndex];\n    if (!chunk) {\n      return undefined;\n    }\n\n    return chunk[indexInChunk];\n  }\n\n  private getFrameIndexInChunk(frameIndex: number) {\n    const chunkIndex = this.getChunkIndex(frameIndex);\n    return frameIndex - chunkIndex * this.chunkSize;\n  }\n\n  private getChunkIndex(frameIndex: number) {\n    return Math.floor(frameIndex / this.chunkSize);\n  }\n\n  private requestChunk(chunkIndex: number) {\n    if (this.chunks[chunkIndex]) {\n      return;\n    }\n\n    this.chunks[chunkIndex] = [];\n\n    const fromIndex = chunkIndex * this.chunkSize;\n    const toIndex = Math.min(fromIndex + this.chunkSize - 1, this.framesCount! - 1);\n\n    workers[this.workerIndex].request({\n      name: 'renderFrames',\n      args: [this.key, fromIndex, toIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevChunk(chunkIndex: number) {\n    if (this.chunksCount! < 3) {\n      return;\n    }\n\n    const prevChunkIndex = cycleRestrict(this.chunksCount!, chunkIndex - 1);\n    this.chunks[prevChunkIndex] = undefined;\n  }\n\n  private requestNextChunk(chunkIndex: number) {\n    if (this.chunksCount === 1) {\n      return;\n    }\n\n    const nextChunkIndex = cycleRestrict(this.chunksCount!, chunkIndex + 1);\n\n    if (!this.chunks[nextChunkIndex]) {\n      this.requestChunk(nextChunkIndex);\n    }\n  }\n\n  private onFrameLoad(frameIndex: number, arrayBuffer: ArrayBuffer) {\n    const chunkIndex = this.getChunkIndex(frameIndex);\n    const chunk = this.chunks[chunkIndex];\n    // Frame can be skipped and chunk can be already cleaned up\n    if (!chunk) {\n      return;\n    }\n\n    chunk[this.getFrameIndexInChunk(frameIndex)] = arrayBuffer;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nexport default RLottie;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n"],"names":["WorkerConnector","constructor","worker","Map","this","subscribe","request","messageData","requestStates","requestStatesByCallback","messageId","generateIdFor","payload","type","requestState","promise","Promise","resolve","reject","Object","assign","args","length","callback","pop","set","catch","finally","delete","postMessage","cancelCallback","progressCallback","isCanceled","get","addEventListener","data","error","response","callbackArgs","HIGH_PRIORITY_QUALITY","IS_SINGLE_COLUMN_LAYOUT","LOW_PRIORITY_QUALITY","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","workers","Array","fill","undefined","map","Worker","URL","lastWorkerIndex","id","container","animationData","params","onLoad","document","createElement","canvas","getContext","initContainer","initConfig","initRenderer","isPlaying","isAnimating","isWaiting","play","stopFrameIndex","direction","doPlay","pause","approxFrameIndex","currentChunkIndex","getChunkIndex","chunks","chunk","i","goToAndPlay","frameIndex","Math","floor","reduceFactor","goToAndStop","playSegment","startFrameIndex","setSpeed","speed","destroy","isDestroyed","destroyRenderer","destroyContainer","parentNode","HTMLElement","Error","size","offsetWidth","parseInt","style","width","height","isLowPriority","quality","imgSize","round","max","DPR","appendChild","key","maxFps","sourceFps","fr","msPerFrame","cacheModulo","chunkSize","remove","workerIndex","cycleRestrict","name","onRendererInit","bind","framesCount","chunksCount","ceil","lastRenderAt","animate","isOnLoadFired","chunkIndex","requestChunk","cleanupPrevChunk","requestNextChunk","prevFrameIndex","frame","getFrame","imageData","ImageData","Uint8ClampedArray","ctx","putImageData","now","Date","currentSpeed","delta","min","expectedNextFrameIndex","noLoop","nextFrameIndex","indexInChunk","getFrameIndexInChunk","fromIndex","toIndex","onFrameLoad","prevChunkIndex","nextChunkIndex","arrayBuffer","index"],"sourceRoot":""}