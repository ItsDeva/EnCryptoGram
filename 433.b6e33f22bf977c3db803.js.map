{"version":3,"file":"433.b6e33f22bf977c3db803.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventIosPinchZoom.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/util/routing.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack://telegram-t/./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/ui/CheckboxGroup.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useDebounce.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/util/deeplink.ts","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport { ANIMATION_END_DELAY, FAST_SMOOTH_MAX_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId } : { chatId: number; userId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId } : { chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const result = await callApi('openChatByInvite', hash);\n      if (!result) {\n        return;\n      }\n\n      actions.openChat({ id: result.chatId });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const chatOrChannelPostId = match[2] ? Number(match[2]) : undefined;\n    const messageId = match[3] ? Number(match[3]) : undefined;\n\n    // Open message in private chat\n    if (username === 'c' && chatOrChannelPostId && messageId) {\n      actions.focusMessage({ chatId: -chatOrChannelPostId, messageId });\n    } else {\n      void openChatByUsername(actions, username, chatOrChannelPostId);\n    }\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/environment';\nimport { encrypt } from '../../helpers/encryption';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n  // console.log(\"Printing Payload\", payload);\n  \n  if (payload.text.substring(0,2) == '..') {\n    encrypt(payload.text).then((enc) => {\n      payload.text = '&^%'+enc;\n      // console.log('payload.text', payload.text);\n      const params = {\n        ...payload,\n        chat,\n        replyingTo: selectReplyingToId(global, chatId, threadId),\n        noWebPage: selectNoWebPage(global, chatId, threadId),\n      };\n      const isSingle = !payload.attachments || payload.attachments.length <= 1;\n      if (isSingle) {\n        const { attachments, ...restParams } = params;\n        sendMessage({\n          ...restParams,\n          attachment: attachments ? attachments[0] : undefined,\n        });\n      }\n    });\n    return undefined;\n  }\n\n  // const someFunc = async function () {\n  //   let encrypted = await encrypt(payload.text);\n  //   encrypted = \"{-\"+encrypted\n  //   return new Promise((resolve, reject) => {\n  //     resolve(encrypted);\n  //   });\n  // };\n\n  // async function runMe() {\n  //   const result = await someFunc(); // true\n  //   console.log('result',result);\n  //   payload.text = result;\n  // }\n  // runMe();\n\n  // console.log('After async call');\n\n  // const sendText = async () => {\n  //   debugger;\n  //   let tm = await encrypt(payload.text);\n  //   return tm;\n  // }\n  // payload.text = result;\n\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n  return undefined;\n\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return undefined;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi('fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo?.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n  selectNotifySettings,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n      const { hasWebNotifications } = selectNotifySettings(global);\n      if (hasWebNotifications) {\n        showNewMessageNotification({\n          chat,\n          message,\n          isActiveChat,\n        });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\nexport default function usePreventIosPinchZoom(isDisabled = false) {\n  // Disable viewport zooming on iOS Safari\n  useEffect(() => {\n    if (!IS_IOS || isDisabled) {\n      return undefined;\n    }\n\n    document.addEventListener('gesturestart', preventEvent);\n\n    return () => {\n      document.removeEventListener('gesturestart', preventEvent);\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n                onContentChange={setContent}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                isActive={isActive}\n                currentScreen={settingsScreen}\n                foldersState={foldersState}\n                foldersDispatch={foldersDispatch}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                foldersDispatch={foldersDispatch}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { MessageList, MessageListType } from '../global/types';\nimport { MAIN_THREAD_ID } from '../api/types';\n\nexport const createMessageHash = (messageList: MessageList): string => (\n  messageList.chatId.toString()\n  + (messageList.type !== 'thread' ? `_${messageList.type}`\n    : (messageList.threadId !== -1 ? `_${messageList.threadId}` : ''))\n);\n\nexport const parseMessageHash = (value: string): MessageList => {\n  const [chatId, typeOrThreadId] = value.split('_');\n  const isType = ['thread', 'pinned', 'scheduled'].includes(typeOrThreadId);\n\n  return {\n    chatId: Number(chatId),\n    type: !!typeOrThreadId && isType ? (typeOrThreadId as MessageListType) : 'thread',\n    threadId: !!typeOrThreadId && !isType ? Number(typeOrThreadId) : MAIN_THREAD_ID,\n  };\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleRestartBot}\n        >\n          {lang('BotRestart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_SINGLE_COLUMN_LAYOUT || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat?.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_SINGLE_COLUMN_LAYOUT && canSubscribe)\n      || (IS_SINGLE_COLUMN_LAYOUT && canSearch)\n      || canMute\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    openPreviousChat();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n  usePauseOnInactive(videoRef, isPlayAllowed);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {!previewBlobUrl && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n        />\n      )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n      {isInline && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {(isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner) && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled,\n  threadInfo,\n  usersById,\n  chatsById,\n  openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n} from '../../../api/types';\nimport { FocusDirection, IAlbum, ISettings } from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleMessageSelection' | 'clickInlineButton' | 'disableContextMenuHint'>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  toggleMessageSelection,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId));\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    if (isLocal) {\n      return;\n    }\n\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [isLocal, toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isLocal,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    Boolean(isScheduled),\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleMessageSelection',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isLocal: boolean,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode && !isLocal) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode && !isLocal ? handleContextMenu : undefined,\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: number,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId, threadId, messageId: replyToMessageId, replyMessageId: messageId,\n    });\n  }, [focusMessage, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [isInDocumentGroup, focusMessage, forwardInfo, groupedId, chatId]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isActive: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isActive,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isActive,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isActive: boolean,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isActive) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const sticker = stickers?.length ? stickers[userId % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: number;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport { isChatChannel, isChatGroup, isChatPrivate } from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  isActive: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isActive,\n  isChatWithSelf,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds && messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isChatPrivate(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isActive={isActive}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /[\\w\\d_-]*/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = html.substr(1).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  botKeyboardPlaceholder?: string;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n  botCommands?: ApiBotCommand[] | false;\n  chatBotCommands?: ApiBotCommand[];\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory();\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              faded\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              faded\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={!attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { createMessageHash } from '../../util/routing';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, true);\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists ? messageLists.map(createMessageHash) : []);\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n            >\n              {(isActive) => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    isActive={isActive}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              target=\"sharedMedia\"\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\nimport { LangCode } from '../../types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventIosPinchZoom from '../../hooks/usePreventIosPinchZoom';\nimport { processDeepLink } from '../../util/deeplink';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  language?: LangCode;\n  openedStickerSetShortName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  language,\n  openedStickerSetShortName,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  openStickerSetShortName,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots, loadEmojiKeywords, language,\n  ]);\n\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventIosPinchZoom(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      language: global.settings.byKey.language,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName',\n  ]),\n)(Main));\n","import { getDispatch } from '../lib/teact/teactn';\n\nexport const processDeepLink = (url: string) => {\n  const { protocol, searchParams, pathname } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const { openChatByUsername, openStickerSetShortName } = getDispatch();\n\n  const method = pathname.replace(/^\\/\\//, '');\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain,\n      } = params;\n\n      if (domain !== 'telegrampassport') {\n        openChatByUsername({\n          username: domain,\n        });\n      }\n      break;\n    }\n    case 'privatepost':\n\n      break;\n    case 'bg':\n\n      break;\n    case 'join':\n\n      break;\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'msg':\n\n      break;\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","selectSupportChat","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","createdChannel","channelId","accessHash","getDispatch","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","RE_TME_LINK","chatOrChannelPostId","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","uploadProgressCallbacks","Map","runDebouncedForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","clearWebPagePreview","value","text","substring","encrypt","then","enc","noWebPage","selectNoWebPage","attachments","restParams","isSingle","isGrouped","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","minId","selectFirstUnreadId","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","getServerTime","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","runDebouncedForSearch","sendBotCommand","command","button","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","updateAppBadge","selectCountNotMutedUnread","closeMessageNotifications","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","hasWebNotifications","selectNotifySettings","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","unique","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","usersById","orderedFolderIds","shouldSkipHistoryAnimations","notifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","noFirst","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","createMessageHash","messageList","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canLeave","joinChannel","openLocalTextSearch","restartBot","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","querySelector","focus","searchInput","disabled","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","catch","drawRect","width","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","fileName","renderAudio","subtitle","renderVoice","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","componentEl","add","remove","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","Infinity","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","onMouseDown","preventMessageInputBlur","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","shouldAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","inSelectMode","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","isPlayAllowed","wasPlaying","freezePlaying","paused","unfreezePlaying","contains","unfreezePlayingOnRaf","fastRaf","hasFocus","useBackgroundMode","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","chatUsername","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","messageGroups","isViewportNewest","isUnread","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isCreator","isBot","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","shouldRunLast","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","buildAttachment","filename","blob","isQuick","URL","createObjectURL","mimeType","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","requestAnimationFrame","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","parseMessageInput","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","ReceiptModal","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isReceiptModalOpen","shouldSuggestStickers","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","sendInlineBotResult","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","replace","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevChatId","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","media","file","getAsFile","pastedText","getData","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","leftColumnWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","handleLoadMore","messageIdsRef","getMessageContentIds","reverse","getMore","useInfiniteScroll","runThrottledForScroll","isScrollingProgrammatically","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","MEMBERS_SLICE","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","determineProfileState","tabListEl","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","ListItem","teactOrderKey","contextActions","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","fullName","getUserFullName","contactId","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","openStickerSetShortName","LOCATION_HASH","protocol","searchParams","pathname","domain","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","usePreventIosPinchZoom","onDrop","onDragOver","initApi"],"sourceRoot":""}